{"version":3,"sources":["data/servers.js","components/menu.js","components/status.js","components/game.js","App.js","reportWebVitals.js","index.js"],"names":["servers","id","value","Menu","props","level","changeLevel","server","setServer","levels","i","push","className","onClick","process","changeServer","useCallback","event","target","onChange","map","eServer","index","Status","status","data-status","Game","columns","x","column","y","row","Math","abs","z","data-value","data-x","data-y","data-z","App","useState","setLevel","setStatus","newLevel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.017e6ffa.chunk.js","sourcesContent":["const servers = [\r\n  {\r\n    id: 'localhost',\r\n    value: 'http://localhost:13337'\r\n  },\r\n  {\r\n    id: 'server',\r\n    value: '//68f02c80-3bed-4e10-a747-4ff774ae905a.pub.instances.scw.cloud'\r\n  }\r\n]\r\n\r\nexport default servers\r\n","import React, { useCallback } from 'react'\r\nimport servers from '../data/servers'\r\n\r\nexport default function Menu (props) {\r\n  const { level, changeLevel, server, setServer } = props\r\n\r\n  const levels = []\r\n\r\n  for (let i = process.env.REACT_APP_FIRST_LEVEL; i <= process.env.REACT_APP_LAST_LEVEL; i++) {\r\n    levels.push(<button key={i} className={level === i ? 'active' : ''} onClick={() => changeLevel(i)}>{i}</button>)\r\n  }\r\n\r\n  const changeServer = useCallback((event) => {\r\n    setServer(event.target.value)\r\n  }, [server])\r\n\r\n  return (\r\n    <div className=\"menu\">\r\n      <dl className=\"menu-item\">\r\n        RNG-server url\r\n        <select id=\"url-server\" onChange={changeServer} value={server}>\r\n          {servers.map((eServer, index) => (<option\r\n            key={index}\r\n            id={eServer.id}\r\n            value={eServer.value}>\r\n              {eServer.value}\r\n          </option>))}\r\n        </select>\r\n      </dl>\r\n      <dl className=\"menu-item\">\r\n        <dt className=\"menu-title\">Select radius</dt>\r\n        <dd className=\"menu-items\">\r\n          { levels }\r\n        </dd>\r\n      </dl>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Status (props) {\r\n  const { status } = props\r\n\r\n  return (\r\n    <div className=\"status\">\r\n      Game status: <span data-status={status}>{status}</span>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Game (props) {\r\n  const { level } = props\r\n  const columns = []\r\n\r\n  for (let x = -level + 1; x < level; x++) {\r\n    const column = []\r\n    let y = level - 1 - (x <= 0 ? 0 : x)\r\n\r\n    for (let row = 0; row < 2 * level - 1 - Math.abs(x); row++) {\r\n      const z = 0 - x - y\r\n\r\n      column.push(<div key={row} className=\"hexagon\" data-value=\"0\" data-x={x} data-y={y} data-z={z}>\r\n        <span className=\"value\">{0}</span>\r\n      </div>)\r\n\r\n      y--\r\n    }\r\n    columns.push(column)\r\n  }\r\n\r\n  return (\r\n    <div className={'game level-' + level}>\r\n      {columns.map((column, index) => (<div key={index} className=\"column\">{column}</div>))}\r\n    </div>\r\n  )\r\n}\r\n","import React, { Fragment, useState } from 'react'\nimport Menu from './components/menu'\nimport Status from './components/status'\nimport Game from './components/game'\nimport servers from './data/servers'\n\nfunction App () {\n  const [level, setLevel] = useState(0)\n  const [status, setStatus] = useState('round-select')\n  const [server, setServer] = useState(servers[1].value)\n\n  const startGame = (newLevel) => {\n    setLevel(newLevel)\n    setStatus('playing')\n  }\n\n  return (\n    <main>\n      <Menu level={level} changeLevel={startGame} server={server} setServer={setServer} />\n      {status !== 'round-select'\n        ? <Game level={level} />\n        : <Fragment />}\n      <Status status={status} />\n      {status !== 'round-select'\n        ? <p><i>Use q, w, e, a, s, d keys for move</i></p>\n        : <Fragment />}\n    </main>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}
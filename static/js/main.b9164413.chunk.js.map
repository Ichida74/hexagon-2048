{"version":3,"sources":["data/servers.js","components/menu.js","components/status.js","components/game.js","data/statuses.js","App.js","reportWebVitals.js","index.js"],"names":["servers","id","value","Menu","props","level","changeLevel","server","setServer","levels","i","push","className","onClick","process","changeServer","useCallback","event","target","onChange","map","eServer","index","Status","status","data-status","title","Game","cells","columns","x","column","currentCells","filter","cell","y","row","z","currentCell","data-value","data-x","data-y","data-z","Math","abs","statuses","roundSelect","showArea","playing","gameOver","networkUnavailable","App","useState","setLevel","setStatus","setCells","startGame","newLevel","a","sendRequest","fetch","method","body","JSON","stringify","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9164413.chunk.js","sourcesContent":["const servers = [\r\n  {\r\n    id: 'localhost',\r\n    value: 'http://localhost:13337'\r\n  },\r\n  {\r\n    id: 'server',\r\n    value: '//68f02c80-3bed-4e10-a747-4ff774ae905a.pub.instances.scw.cloud'\r\n  }\r\n]\r\n\r\nexport default servers\r\n","import React, { useCallback } from 'react'\r\nimport servers from '../data/servers'\r\n\r\nexport default function Menu (props) {\r\n  const { level, changeLevel, server, setServer } = props\r\n\r\n  const levels = []\r\n\r\n  for (let i = process.env.REACT_APP_FIRST_LEVEL; i <= process.env.REACT_APP_LAST_LEVEL; i++) {\r\n    levels.push(<button key={i} className={level === i ? 'active' : ''} onClick={() => changeLevel(i)}>{i}</button>)\r\n  }\r\n\r\n  const changeServer = useCallback((event) => {\r\n    setServer(event.target.value)\r\n  }, [server])\r\n\r\n  return (\r\n    <div className=\"menu\">\r\n      <dl className=\"menu-item\">\r\n        RNG-server url\r\n        <select id=\"url-server\" onChange={changeServer} value={server}>\r\n          {servers.map((eServer, index) => (<option\r\n            key={index}\r\n            id={eServer.id}\r\n            value={eServer.value}>\r\n              {eServer.value}\r\n          </option>))}\r\n        </select>\r\n      </dl>\r\n      <dl className=\"menu-item\">\r\n        <dt className=\"menu-title\">Select radius</dt>\r\n        <dd className=\"menu-items\">\r\n          { levels }\r\n        </dd>\r\n      </dl>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Status (props) {\r\n  const { status } = props\r\n\r\n  return (\r\n    <div className=\"status\">\r\n      Game status: <span data-status={status.title}>{status.title}</span>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Game (props) {\r\n  const { level, cells } = props\r\n  const columns = []\r\n\r\n  for (let x = -level + 1; x < level; x++) {\r\n    const column = []\r\n    const currentCells = cells.filter(cell => cell.x === x)\r\n    let y = level - 1 - (x <= 0 ? 0 : x)\r\n\r\n    for (let row = 0; row < 2 * level - 1 - Math.abs(x); row++) {\r\n      const z = 0 - x - y\r\n      const currentCell = currentCells.filter(cell => cell.y === y && cell.z === z)[0]\r\n      const value = (currentCell && currentCell.value) || 0\r\n\r\n      column.push(<div key={row} className=\"hexagon\" data-value={value} data-x={x} data-y={y} data-z={z}>\r\n        <span className=\"value\">{value}</span>\r\n      </div>)\r\n\r\n      y--\r\n    }\r\n    columns.push(column)\r\n  }\r\n\r\n  return (\r\n    <div className={'game level-' + level}>\r\n      {columns.map((column, index) => (<div key={index} className=\"column\">{column}</div>))}\r\n    </div>\r\n  )\r\n}\r\n","const statuses = {\r\n  roundSelect: {\r\n    title: 'round-select',\r\n    showArea: false\r\n  },\r\n  playing: {\r\n    title: 'playing',\r\n    showArea: true\r\n  },\r\n  gameOver: {\r\n    title: 'game-over',\r\n    showArea: true\r\n  },\r\n  networkUnavailable: {\r\n    title: 'network-unavailable',\r\n    showArea: false\r\n  }\r\n}\r\n\r\nexport default statuses\r\n","import React, { Fragment, useState } from 'react'\nimport Menu from './components/menu'\nimport Status from './components/status'\nimport Game from './components/game'\nimport servers from './data/servers'\nimport statuses from './data/statuses'\n\nfunction App () {\n  const [level, setLevel] = useState(0)\n  const [status, setStatus] = useState(statuses.roundSelect)\n  const [server, setServer] = useState(servers[1].value)\n  const [cells, setCells] = useState([])\n\n  const startGame = async (newLevel) => {\n    setStatus(statuses.playing)\n    await setLevel(newLevel)\n    await setCells([])\n    sendRequest(server, newLevel, [])\n  }\n\n  const sendRequest = (server, level, cells) => {\n    fetch(server + '/' + level, {\n      method: 'POST',\n      body: JSON.stringify(cells)\n    }).then(response => response.json())\n      .then(data => setCells(data))\n      .catch(() => setStatus(statuses.networkUnavailable))\n  }\n\n  return (\n    <main>\n      <Menu level={level} changeLevel={startGame} server={server} setServer={setServer} />\n      {status.showArea\n        ? <Game level={level} cells={cells} />\n        : <Fragment />}\n      <Status status={status} />\n      {status.showArea\n        ? <p><i>Use q, w, e, a, s, d keys for move</i></p>\n        : <Fragment />}\n    </main>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}